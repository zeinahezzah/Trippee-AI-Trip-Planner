{"version":3,"file":"sse.js","sourceRoot":"","sources":["../../../src/api/sse.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAWlC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,MAAM,CAAC,KAAK,UAAU,OAAO,CAC3B,QAAqC,EACrC,OAA6C;IAE7C,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,IAAI,oBAAoB,GAAG,EAAE,CAAC;IAC9B,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,OAAO,cAAc,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;QACtC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE;YAC3C,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;QACD,OAAO,GAAG,IAAI,CAAC;QACf,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,KAAK,IAAI,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YACnC,IAAI,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;gBAC5B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACpB;YACD,IAAI,CAAC,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC5C,OAAO,MAAM,CAAC;aACf;YACD,IAAI;gBACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,GAAG,CAAC,CAAC;gBACrD,oBAAoB,GAAG,EAAE,CAAC;gBAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;aAC7B;YAAC,OAAO,CAAC,EAAE;gBACV,oBAAoB,IAAI,GAAG,CAAC;aAC7B;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,cAAc,CAC5B,MAA6B,EAC7B,YAAoC;;;;YAEpC,KAA0B,eAAA,WAAA,cAAA,MAAM,CAAA,YAAA;gBAAN,sBAAM;gBAAN,WAAM;;oBAArB,MAAM,KAAK,KAAA,CAAA;oBACpB,cAAA,KAAK,CAAC,CAAC,iBAAA,cAAA,YAAY,CAAC,KAAK,CAAC,CAAA,CAAA,CAAA,CAAC;;;;;aAC5B;;;;;;;;;IACH,CAAC;CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport { StreamableMethod } from \"@azure-rest/core-client\";\nimport { getStream } from \"./getStream.js\";\n\nexport async function getSSEs<TResponse, TEvent>(\n  response: StreamableMethod<TResponse>,\n  toEvent: (obj: Record<string, any>) => TEvent\n): Promise<AsyncIterable<TEvent>> {\n  const stream = getStream(response);\n  let prevLineIfIncomplete = \"\";\n  let started = false;\n  return streamToEvents(stream, (chunk) => {\n    if (!chunk.startsWith(\"data: \") && !started) {\n      throw new Error(chunk);\n    }\n    started = true;\n    const events: TEvent[] = [];\n    for (let str of chunk.split(\"\\n\\n\")) {\n      if (str.startsWith(\"data: \")) {\n        str = str.slice(6);\n      }\n      if ([\"\", \"[DONE]\", \"[DONE]\\n\"].includes(str)) {\n        return events;\n      }\n      try {\n        const event = JSON.parse(prevLineIfIncomplete + str);\n        prevLineIfIncomplete = \"\";\n        events.push(toEvent(event));\n      } catch (e) {\n        prevLineIfIncomplete += str;\n      }\n    }\n    return events;\n  });\n}\n\nasync function* streamToEvents<T>(\n  stream: AsyncIterable<string>,\n  processChunk: (chunk: string) => T[]\n): AsyncIterable<T> {\n  for await (const chunk of stream) {\n    yield* processChunk(chunk);\n  }\n}\n"]}